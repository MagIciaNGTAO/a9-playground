package org.mingtaoz.leetcode.array;

import static org.truth0.Truth.ASSERT;

import org.junit.Before;
import org.junit.Test;
import org.mingtaoz.leetcode.array.MedianOfTwoSortedArrays;

public class MedianOfTwoSortedArraysTest {

	private MedianOfTwoSortedArrays sut;

	@Before
	public void setup() {
		sut = new MedianOfTwoSortedArrays();
	}

	@Test
	public void testFindMinIndex0000() {
		// TODO the index is lean to right or accurate, if lean happens cut
		// include right
		int[] A = {  };
		int[] B = { 2, 3 };
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(2.5);
	}
	
	@Test
	public void testFindMinIndex000() {
		// TODO the index is lean to right or accurate, if lean happens cut
		// include right
		int[] A = {  };
		int[] B = { 1 };
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(1.0);
	}
	
	@Test
	public void testFindMinIndex00() {
		// TODO the index is lean to right or accurate, if lean happens cut
		// include right
		int[] A = { 0 };
		int[] B = { 1 };
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(0.5);
	}
	
	@Test
	public void testFindMinIndex0() {
		// TODO the index is lean to right or accurate, if lean happens cut
		// include right
		int[] A = { 1, 2, 3 };
		int[] B = { 4, 5, 6, 7, 8, 9 };
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(5.0);
	}

	@Test
	public void testFindMinIndex1() {
		// TODO the index is lean to right or accurate, if lean happens cut
		// include right
		int[] A = { 1, 3, 5 };
		int[] B = { 2, 4, 6 };
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(3.5);
	}

	@Test
	public void testFindMinIndex2() {
		// TODO when index is accurate, cut include left
		int[] A = { 1, 3, 4 };
		int[] B = { 2, 5 };
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(3.0);
	}

	@Test
	public void testFindMinIndex3() {
		int[] A = { 1, 2, 3 };
		int[] B = { 1, 2, 3 };
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(2.0);
	}

	@Test
	public void testFindMinIndex4() {
		int[] A = { 1, 2 };
		int[] B = { 1, 2, 3 };
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(2.0);
	}

	@Test
	public void testFindMinIndex5() {
		int[] A = { 1, 2, 3 };
		int[] B = { 1, 3 };
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(2.0);
	}

	@Test
	public void testFindMinIndex6() {
		int[] A = { 1, 2, 3, 4 };
		int[] B = { 1, 2, 3, 4 };
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(2.5);
	}

	@Test
	public void testFindMinIndex7() {
		int[] A = { 1 };
		int[] B = { 2, 3, 4 };
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(2.5);
	}

	@Test
	public void testFindMinIndex8() {
		int[] A = { 1, 2 };
		int[] B = { 3, 4, 5, 6 };
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(3.5);
	}

	@Test
	public void testFindMinIndex9() {
		int[] A = { 1, 1 };
		int[] B = { 1, 2 };
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(1.0);
	}

	@Test
	public void testFindMinIndex10() {
		int[] A = { 1, 3, 6 };
		int[] B = { 1, 2, 4, 7 };
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(3.0);
	}

	@Test
	public void testFindMinIndex11() {
		int[] A = { 2, 6 };
		int[] B = { 1, 3, 4, 5 }; // 1 2 3 4 5 6
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(3.5);
	}

	@Test
	public void testFindMinIndex12() {
		int[] A = { 1, 3 };
		int[] B = { 2, 4, 5, 6 }; // 1 2 3 4 5 6
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(3.5);
	}

	@Test
	public void testFindMinIndex13() {
		int[] A = { 1, 2 };
		int[] B = { 3, 4, 5, 6, 7 }; // 1 2 3 4 5 6
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(4.0);
	}

	@Test
	public void testFindMinIndex14() {
		int[] A = { 1, 2 };
		int[] B = { 1, 1 }; // 1 2 3 4 5 6
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(1.0);
	}

	@Test
	public void testFindMinIndex15() {
		int[] A = { 1, 2 };
		int[] B = { 3, 4 }; // 1 2 3 4 5 6
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(2.5);
	}

	@Test
	public void testFindMinIndex16() {
		int[] A = { 1, 2 };
		int[] B = { 3, 4, 5 }; // 1 2 3 4 5 6
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(3.0);
	}

	@Test
	public void testFindMinIndex17() {
		int[] A = { 3, 4, 5, 6 };
		int[] B = { 1, 2 }; // 1 2 3 4 5 6
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(3.5);
	}

	@Test
	public void testFindMinIndex18() {
		int[] A = { 4, 5 };
		int[] B = { 1, 2, 3, 6 }; // 1 2 3 4 5 6
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(3.5);
	}

	@Test
	public void testFindMinIndex19() {
		int[] A = { 1, 2, 3, 6 };
		int[] B = { 4, 5 }; // 1 2 3 4 5 6
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(3.5);
	}

	@Test
	public void testFindMinIndex20() {
		int[] A = { 1, 2, 3, 6 };
		int[] B = { 4, 5 }; // 1 2 3 4 5 6
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(3.5);
	}

	@Test
	public void testFindMinIndex21() {
		int[] A = { 1, 2, 3 };
		int[] B = { 4, 5, 6 }; // 1 2 3 4 5 6
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(3.5);
	}

	@Test
	public void testFindMinIndex22() {
		int[] A = { 4, 5, 6 };
		int[] B = { 1, 2, 3 }; // 1 2 3 4 5 6
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(3.5);
	}

	@Test
	public void testFindMinIndex23() {
		int[] A = { 3, 4, 5, 6, 7 };
		int[] B = { 1, 2 }; // 1 2 3 4 5 6
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(4.0);
	}

	@Test
	public void testFindMinIndex24() {
		int[] A = { 1, 5 };
		int[] B = { 2, 3, 4, 6, 7, 8 };
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(4.5);
	}

	@Test
	public void testFindMinIndex25() {
		int[] A = { 1, 5, 9, 10, };
		int[] B = { 2, 3, 7, 25, 33 };
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(7.0);
	}

	@Test
	public void testFindMinIndex26() {
		int[] A = { 76, 89, 104, 287, 566, 596, 660, 719, 879, 1012, 1080,
				1225, 1304, 1568, 1898, 1959, 1965, 2140, 2276, 2395, 2634,
				2764, 2801, 2877, 3009, 3010, 3188, 3318, 3356, 3459, 3549,
				3586, 3793, 3844, 3890, 4297, 4328, 4423, 4494, 4546, 4570,
				4613, 4616, 4630, 4680, 4807, 5002, 5237, 5245, 5312, 5345,
				5489, 5606, 5731, 5732, 5796, 5816, 6116, 6197, 6201, 6204,
				6303, 6339, 6357, 6395, 6412, 6445, 6552, 6584, 6612, 6678,
				6823, 6825, 6892, 7272, 7311, 7534, 7535, 7686, 7891, 8032,
				8112, 8120, 8226, 8239, 8578, 8583, 8807, 9214, 9317, 9384,
				9388, 9447, 9484, 9611, 9739, 9753, 9812, 9838, 9854, 9905,
				9936, 9944, 9978, 10033, 10346, 10356, 10581, 10583, 10755,
				10764, 10819, 10845, 11040, 11049, 11111, 11169, 11183, 11249,
				11597, 11640, 11739, 11743, 11856, 11925, 11950, 11991, 12086,
				12175, 12531, 12551, 12581, 12721, 12987, 13101, 13176, 13259,
				13342, 13401, 13550, 13635, 13657, 13713, 13981, 14014, 14032,
				14039, 14093, 14152, 14205, 14322, 14339, 14361, 14444, 14449,
				14471, 14536, 14600, 14661, 14892, 15034, 15313, 15399, 15530,
				15553, 15653, 15723, 15734, 15767, 15811, 16002, 16057, 16066,
				16182, 16453, 16540, 16629, 16924, 16946, 17323, 17339, 17362,
				17416, 17466, 17629, 17769, 17978, 17985, 18262, 18417, 18485,
				18555, 18565, 18565, 18652, 18687, 18701, 18709, 18791, 19076,
				19094, 19163, 19171, 19195, 19263, 19381, 19381, 19432, 19566,
				19625, 19722, 19738, 19743, 19892, 19960, 20124, 20272, 20290,
				20324, 20405, 20516, 20587, 20734, 20808, 20915, 20958, 20965,
				21069, 21234, 21384, 21440, 21441, 21595, 21690, 21704, 21710,
				21734, 21802, 21858, 21956, 21989, 22004, 22055, 22102, 22235,
				22254, 22272, 22283, 22399, 22487, 22623, 22646, 22724, 22774,
				22821, 22825, 23076, 23251, 23306, 23477, 23751, 23852, 24057,
				24123, 24179, 24288, 24436, 24529, 24685, 24897, 25077, 25116,
				25190, 25325, 25547, 25552, 25614, 25707, 25754, 25824, 25920,
				25941, 25955, 25962, 26071, 26091, 26182, 26193, 26199, 26494,
				26525, 26535, 26624, 26815, 26944, 27031, 27055, 27068, 27085,
				27207, 27298, 27347, 27349, 27388, 27522, 27737, 27900, 28046,
				28150, 28180, 28184, 28253, 28300, 28398, 28438, 28615, 28698,
				28867, 28933, 28959, 29213, 29219, 29224, 29279, 29396, 29511,
				29528, 29632, 29693, 29850, 29897, 29972, 29979, 30057, 30085,
				30115, 30123, 30225, 30544, 30550, 30770, 30787, 30823, 31070,
				31259, 31324, 31714, 31971, 32033, 32076, 32251, 32319, 32350,
				32408, 32475, 32681, 32701, 32764 };
		int[] B = { 122, 255, 318, 346, 361, 452, 520, 584, 603, 657, 669, 695,
				708, 730, 745, 757, 766, 770, 773, 787, 799, 818, 845, 873,
				875, 899, 966, 985, 1103, 1114, 1164, 1238, 1243, 1261, 1284,
				1339, 1351, 1424, 1431, 1457, 1468, 1482, 1493, 1514, 1584,
				1601, 1630, 1644, 1683, 1739, 1744, 1751, 1793, 1867, 1870,
				1909, 1912, 1941, 1970, 2017, 2137, 2155, 2194, 2214, 2236,
				2257, 2472, 2514, 2548, 2654, 2734, 2791, 2798, 2823, 2886,
				2887, 2919, 2941, 2958, 2998, 2999, 3026, 3054, 3061, 3174,
				3192, 3225, 3282, 3358, 3389, 3392, 3406, 3427, 3429, 3470,
				3501, 3555, 3590, 3604, 3676, 3718, 3724, 3744, 3765, 3796,
				3803, 3808, 3846, 3883, 3914, 3916, 4049, 4092, 4102, 4118,
				4128, 4159, 4170, 4170, 4287, 4296, 4309, 4349, 4363, 4374,
				4571, 4594, 4606, 4621, 4637, 4731, 4746, 4775, 4800, 4816,
				4832, 4837, 4867, 4880, 4935, 4942, 4976, 5007, 5077, 5106,
				5122, 5179, 5199, 5237, 5255, 5265, 5341, 5370, 5378, 5394,
				5398, 5467, 5493, 5518, 5548, 5630, 5651, 5762, 5842, 5867,
				5914, 5915, 5935, 6013, 6081, 6092, 6132, 6178, 6217, 6245,
				6289, 6409, 6410, 6445, 6464, 6478, 6481, 6660, 6711, 6711,
				6767, 6778, 6782, 6788, 6844, 6855, 6945, 7036, 7107, 7119,
				7210, 7229, 7256, 7292, 7292, 7355, 7395, 7446, 7455, 7472,
				7477, 7481, 7529, 7558, 7560, 7590, 7661, 7669, 7749, 7802,
				7862, 7886, 7922, 7993, 8007, 8009, 8051, 8055, 8064, 8071,
				8211, 8305, 8410, 8443, 8457, 8463, 8496, 8629, 8633, 8649,
				8744, 8745, 8834, 9021, 9059, 9081, 9098, 9125, 9126, 9136,
				9210, 9222, 9235, 9318, 9353, 9367, 9384, 9475, 9495, 9519,
				9543, 9596, 9597, 9679, 9691, 9705, 9708, 9842, 9890, 9905,
				9907, 9914, 9923, 9932, 9937, 9939, 10006, 10015, 10098, 10154,
				10156, 10183, 10202, 10209, 10226, 10229, 10245, 10290, 10307,
				10361, 10412, 10438, 10446, 10450, 10461, 10534, 10545, 10651,
				10727, 10860, 10940, 10970, 10996, 11056, 11088, 11091, 11111,
				11160, 11162, 11216, 11241, 11292, 11292, 11465, 11475, 11538,
				11576, 11696, 11704, 11825, 11858, 12014, 12070, 12083, 12153,
				12163, 12171, 12202, 12211, 12225, 12239, 12251, 12316, 12549,
				12580, 12583, 12593, 12702, 12718, 12731, 12769, 12813, 12961,
				12973, 13016, 13027, 13031, 13033, 13035, 13082, 13097, 13125,
				13140, 13143, 13190, 13219, 13281, 13283, 13326, 13349, 13364,
				13394, 13418, 13439, 13448, 13451, 13462, 13528, 13540, 13616,
				13694, 13729, 13790, 13800, 13808, 13891, 13920, 13943, 13979,
				14216, 14354, 14371, 14378, 14388, 14487, 14530, 14543, 14543,
				14642, 14712, 14782, 14786, 14828, 14829, 14832, 14897, 14911,
				14914, 14973, 15012, 15054, 15080, 15107, 15123, 15130, 15149,
				15151, 15159, 15236, 15262, 15319, 15328, 15340, 15372, 15445,
				15458, 15461, 15568, 15576, 15651, 15658, 15670, 15736, 15819,
				15868, 15871, 15991, 16044, 16198, 16229, 16251, 16322, 16335,
				16364, 16397, 16403, 16408, 16417, 16456, 16492, 16495, 16562,
				16565, 16605, 16620, 16644, 16652, 16809, 16861, 16908, 16942,
				16955, 17044, 17061, 17102, 17225, 17240, 17335, 17337, 17361,
				17462, 17469, 17540, 17649, 17686, 17728, 17754, 17781, 17830,
				17874, 18019, 18023, 18130, 18133, 18181, 18254, 18255, 18281,
				18370, 18380, 18391, 18398, 18419, 18488, 18491, 18520, 18638,
				18663, 18763, 18857, 18865, 18894, 18944, 18956, 18987, 18997,
				19044, 19067, 19071, 19135, 19165, 19277, 19287, 19302, 19333,
				19347, 19389, 19497, 19570, 19587, 19592, 19640, 19803, 19872,
				19880, 19923, 19927, 19946, 19993, 20004, 20007, 20088, 20223,
				20247, 20298, 20376, 20378, 20417, 20433, 20439, 20471, 20472,
				20505, 20527, 20640, 20652, 20705, 20726, 20762, 20788, 20811,
				20814, 20851, 20862, 20879, 20909, 21014, 21146, 21236, 21273,
				21290, 21361, 21436, 21466, 21492, 21673, 21796, 21831, 21834,
				21898, 21973, 21991, 22019, 22020, 22046, 22046, 22151, 22193,
				22213, 22244, 22296, 22329, 22440, 22444, 22454, 22462, 22471,
				22518, 22537, 22554, 22578, 22647, 22762, 22895, 22897, 22946,
				22988, 22989, 22997, 23035, 23076, 23109, 23136, 23325, 23343,
				23383, 23387, 23437, 23450, 23533, 23541, 23562, 23596, 23779,
				23796, 23820, 23932, 24010, 24125, 24142, 24242, 24373, 24547,
				24560, 24587, 24598, 24650, 24737, 24767, 24774, 24832, 24868,
				24876, 24892, 24911, 24947, 24982, 25004, 25041, 25115, 25223,
				25226, 25245, 25384, 25398, 25483, 25567, 25607, 25636, 25690,
				25713, 25728, 25732, 25738, 25784, 25811, 25884, 25930, 25955,
				25959, 25982, 26035, 26076, 26093, 26107, 26124, 26157, 26192,
				26212, 26231, 26264, 26302, 26361, 26367, 26380, 26422, 26453,
				26486, 26544, 26580, 26770, 26785, 26804, 26851, 26880, 26972,
				26977, 27025, 27041, 27096, 27098, 27182, 27202, 27235, 27284,
				27349, 27372, 27396, 27454, 27511, 27529, 27537, 27598, 27719,
				27736, 27832, 27860, 27864, 27884, 27917, 27934, 27948, 28039,
				28041, 28042, 28043, 28050, 28074, 28100, 28106, 28123, 28162,
				28195, 28367, 28422, 28453, 28505, 28541, 28566, 28595, 28596,
				28605, 28615, 28640, 28641, 28652, 28657, 28667, 28696, 28740,
				28759, 28779, 28803, 28832, 28845, 28852, 28854, 28864, 28932,
				28950, 29042, 29047, 29085, 29147, 29218, 29230, 29244, 29288,
				29332, 29363, 29376, 29440, 29458, 29465, 29467, 29492, 29493,
				29534, 29558, 29560, 29601, 29612, 29663, 29740, 29793, 29817,
				29887, 29906, 30106, 30206, 30231, 30276, 30297, 30331, 30364,
				30378, 30425, 30431, 30565, 30588, 30603, 30613, 30646, 30663,
				30694, 30712, 30726, 30772, 30774, 30846, 30896, 30955, 31055,
				31075, 31110, 31134, 31146, 31228, 31259, 31269, 31271, 31302,
				31334, 31392, 31446, 31511, 31516, 31518, 31562, 31721, 31779,
				31813, 31849, 31865, 31866, 31906, 31906, 31934, 31941, 31954,
				32015, 32083, 32150, 32205, 32232, 32267, 32268, 32294, 32351,
				32373, 32396, 32400, 32405, 32452, 32479, 32480, 32487, 32491,
				32491, 32561, 32590, 32605, 32641, 32716, 32757 };
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(16240.0);
	}

	@Test
	public void testFindMinIndex27() {
		int[] A = { 76, 89, 104, 287, 566, 596, 660 };
		int[] B = { 122, 255, 318, 346, 361 };
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(
				((double) 318 + 287) / 2);
	}

	@Test
	public void testFindMinIndex28() {
		int[] A = { 1, 2, 3, 6, 10, 11, 12 };
		int[] B = { 4, 5, 7, 8, 9 };
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(((double) 6 + 7) / 2);
	}

	@Test
	public void testFindMinIndex29() {
		int[] A = { 29, 126, 242, 263, 315, 349, 390, 521, 530, 539, 578, 690,
				691, 704, 770, 787, 793, 826, 858, 910, 1002, 1048, 1060, 1076,
				1199, 1247, 1265, 1282, 1306, 1346, 1393, 1407, 1414, 1427,
				1433, 1449, 1464, 1474, 1512, 1589, 1663, 1677, 1692, 1700,
				1773, 1789, 1794, 1806, 1822, 1829, 1853, 1869, 1881, 1887,
				1963, 2142, 2146, 2147, 2179, 2244, 2256, 2271, 2300, 2360,
				2388, 2423, 2564, 2609, 2620, 2632, 2670, 2714, 2721, 2761,
				2778, 2834, 2846, 2858, 2867, 2893, 2922, 2958, 3020, 3027,
				3032, 3201, 3233, 3297, 3420, 3440, 3451, 3510, 3532, 3565,
				3589, 3599, 3631, 3633, 3686, 3707, 3773, 3805, 3829, 3843,
				3852, 3891, 3980, 4013, 4063, 4064, 4154, 4194, 4207, 4254,
				4327, 4380, 4478, 4498, 4518, 4537, 4555, 4560, 4569, 4696,
				4765, 4775, 4776, 4787, 4788, 4797, 4813, 4829, 4857, 4872,
				4881, 4909, 4934, 4937, 4952, 4971, 4978, 5050, 5090, 5262,
				5303, 5386, 5390, 5409, 5420, 5465, 5472, 5482, 5498, 5577,
				5616, 5674, 5840, 5877, 5887, 5940, 6121, 6172, 6174, 6189,
				6235, 6330, 6374, 6450, 6480, 6497, 6498, 6528, 6612, 6633,
				6639, 6659, 6675, 6697, 6738, 6754, 6804, 6809, 6873, 6887,
				7056, 7074, 7133, 7134, 7143, 7157, 7162, 7163, 7185, 7238,
				7352, 7354, 7388, 7411, 7430, 7487, 7527, 7573, 7575, 7639,
				7661, 7681, 7696, 7742, 7745, 7763, 7776, 7812, 7816, 7818,
				7865, 7898, 7912, 7954, 7959, 8001, 8029, 8096, 8124, 8132,
				8167, 8201, 8227, 8351, 8365, 8369, 8394, 8401, 8408, 8410,
				8411, 8428, 8451, 8473, 8478, 8661, 8710, 8746, 8758, 8779,
				8823, 8828, 8828, 8977, 8982, 9005, 9069, 9111, 9144, 9265,
				9294, 9303, 9327, 9344, 9355, 9446, 9466, 9508, 9510, 9525,
				9634, 9666, 9699, 9734, 9786, 9887, 9962, 9974, 10006, 10033,
				10048, 10137, 10158, 10216, 10269, 10344, 10441, 10536, 10544,
				10552, 10572, 10628, 10654, 10662, 10684, 10697, 10844, 10853,
				10861, 10872, 10951, 10966, 11008, 11157, 11183, 11217, 11229,
				11259, 11299, 11344, 11479, 11479, 11518, 11532, 11553, 11554,
				11572, 11610, 11656, 11734, 11760, 11762, 11777, 11827, 11843,
				11843, 11849, 11872, 11927, 12046, 12164, 12179, 12204, 12208,
				12212, 12238, 12267, 12314, 12331, 12352, 12353, 12355, 12416,
				12481, 12490, 12505, 12512, 12580, 12650, 12659, 12671, 12728,
				12730, 12777, 12856, 12892, 12914, 13021, 13037, 13062, 13127,
				13152, 13160, 13165, 13166, 13175, 13189, 13224, 13307, 13346,
				13393, 13523, 13541, 13588, 13665, 13720, 13728, 13773, 13817,
				13817, 13831, 13839, 13845, 13907, 13921, 13976, 14003, 14023,
				14025, 14077, 14240, 14355, 14370, 14406, 14491, 14535, 14557,
				14563, 14578, 14584, 14591, 14651, 14662, 14664, 14681, 14682,
				14724, 14730, 14746, 14808, 14817, 14842, 14874, 14908, 14964,
				14996, 15023, 15056, 15066, 15124, 15145, 15183, 15228, 15385,
				15403, 15498, 15529, 15541, 15552, 15679, 15738, 15746, 15759,
				15778, 15781, 15818, 15832, 15836, 15901, 15904, 15955, 15993,
				16056, 16075, 16077, 16101, 16113, 16115, 16134, 16253, 16274,
				16275, 16281, 16291, 16306, 16334, 16366, 16399, 16455, 16496,
				16522, 16532, 16551, 16601, 16607, 16611, 16618, 16645, 16655,
				16815, 16816, 16825, 16857, 16892, 16906, 16933, 16948, 17000,
				17008, 17071, 17092, 17147, 17250, 17256, 17268, 17290, 17383,
				17393, 17394, 17452, 17549, 17558, 17572, 17602, 17629, 17645,
				17663, 17692, 17696, 17744, 17766, 17777, 17819, 17871, 17915,
				18070, 18086, 18124, 18131, 18169, 18228, 18281, 18298, 18339,
				18370, 18378, 18387, 18402, 18414, 18415, 18420, 18463, 18469,
				18473, 18489, 18527, 18540, 18566, 18586, 18586, 18655, 18741,
				18744, 18796, 18833, 18849, 18895, 18904, 18945, 18969, 18973,
				18999, 19001, 19073, 19074, 19157, 19177, 19196, 19232, 19270,
				19360, 19461, 19559, 19572, 19575, 19593, 19701, 19761, 19841,
				19859, 19886, 19898, 19918, 19923, 19960, 19986, 20043, 20087,
				20105, 20175, 20203, 20214, 20272, 20283, 20284, 20294, 20327,
				20390, 20407, 20407, 20420, 20433, 20458, 20464, 20466, 20549,
				20704, 20715, 20751, 20842, 20898, 20905, 21028, 21052, 21069,
				21075, 21080, 21124, 21166, 21172, 21178, 21183, 21275, 21296,
				21325, 21338, 21342, 21400, 21452, 21482, 21494, 21536, 21613,
				21690, 21708, 21718, 21720, 21793, 21831, 21876, 21903, 21911,
				21915, 21932, 21971, 22018, 22049, 22058, 22072, 22097, 22211,
				22230, 22233, 22265, 22306, 22329, 22338, 22363, 22397, 22421,
				22476, 22490, 22550, 22558, 22581, 22607, 22750, 22758, 22779,
				22843, 22877, 22935, 22950, 22996, 23019, 23046, 23122, 23143,
				23166, 23210, 23263, 23344, 23348, 23394, 23426, 23467, 23481,
				23492, 23584, 23594, 23597, 23606, 23622, 23653, 23700, 23780,
				23786, 23809, 23896, 23904, 23917, 23937, 24054, 24077, 24115,
				24134, 24142, 24218, 24266, 24285, 24295, 24313, 24315, 24319,
				24355, 24432, 24444, 24470, 24482, 24485, 24539, 24580, 24696,
				24724, 24751, 24751, 24787, 24841, 24843, 24856, 24876, 24889,
				24916, 24933, 25049, 25062, 25087, 25264, 25375, 25386, 25411,
				25446, 25450, 25453, 25457, 25466, 25521, 25529, 25560, 25631,
				25654, 25707, 25721, 25724, 25762, 25814, 25828, 25843, 25845,
				25857, 25859, 25865, 25892, 25954, 25965, 26034, 26062, 26069,
				26077, 26090, 26188, 26244, 26277, 26294, 26296, 26299, 26312,
				26321, 26349, 26381, 26431, 26472, 26552, 26574, 26591, 26628,
				26639, 26642, 26664, 26704, 26711, 26718, 26743, 26843, 26898,
				26950, 26981, 27018, 27105, 27110, 27123, 27124, 27147, 27246,
				27260, 27297, 27350, 27354, 27398, 27408, 27472, 27503, 27530,
				27572, 27614, 27662, 27682, 27729, 27733, 27802, 27804, 27812,
				27833, 27837, 27913, 27938, 27981, 28016, 28028, 28043, 28145,
				28164, 28207, 28279, 28303, 28305, 28337, 28375, 28397, 28471,
				28549, 28563, 28581, 28600, 28660, 28698, 28806, 28872, 28915,
				28930, 29040, 29061, 29064, 29077, 29180, 29229, 29232, 29252,
				29338, 29354, 29354, 29371, 29371, 29379, 29393, 29400, 29430,
				29444, 29514, 29516, 29523, 29539, 29587, 29588, 29654, 29714,
				29780, 29788, 29879, 29882, 29916, 29944, 29971, 30008, 30013,
				30037, 30074, 30089, 30118, 30168, 30194, 30237, 30251, 30272,
				30278, 30308, 30340, 30380, 30419, 30419, 30439, 30494, 30495,
				30507, 30550, 30582, 30665, 30673, 30703, 30757, 30786, 30804,
				30823, 30897, 30966, 30967, 31004, 31043, 31054, 31055, 31083,
				31086, 31094, 31108, 31239, 31261, 31303, 31327, 31350, 31366,
				31407, 31434, 31479, 31497, 31560, 31634, 31681, 31684, 31684,
				31762, 31849, 31890, 31909, 32157, 32163, 32187, 32231, 32249,
				32267, 32269, 32296, 32381, 32452, 32502, 32510, 32582, 32604,
				32619, 32660, 32694, 32737 };
		int[] B = { 25, 84, 86, 134, 143, 144, 251, 259, 259, 386, 428, 460,
				574, 585, 880, 882, 958, 971, 1111, 1130, 1209, 1216, 1243,
				1338, 1342, 1427, 1474, 1554, 1576, 1614, 1718, 1736, 1793,
				1814, 1877, 1894, 1973, 1985, 2036, 2161, 2163, 2263, 2310,
				2386, 2431, 2615, 2680, 2777, 2807, 2858, 3070, 3102, 3162,
				3177, 3362, 3420, 3470, 3473, 3641, 3711, 3748, 3811, 3852,
				3852, 3906, 3965, 4080, 4103, 4153, 4294, 4325, 4382, 4392,
				4468, 4535, 4624, 4672, 4715, 4764, 4807, 4848, 4887, 5008,
				5144, 5184, 5215, 5284, 5314, 5379, 5478, 5540, 5550, 5565,
				5778, 5810, 5936, 5968, 6092, 6110, 6120, 6164, 6204, 6283,
				6288, 6294, 6303, 6376, 6460, 6497, 6521, 6552, 6636, 6714,
				6715, 6886, 7001, 7028, 7053, 7099, 7271, 7287, 7366, 7464,
				7466, 7656, 7670, 7694, 7694, 7810, 7813, 7829, 7835, 7904,
				7913, 8127, 8138, 8177, 8206, 8276, 8286, 8434, 8473, 8572,
				8594, 8635, 8637, 8678, 8735, 8794, 8821, 8871, 8882, 8915,
				8941, 8974, 9070, 9091, 9097, 9158, 9165, 9198, 9205, 9288,
				9356, 9391, 9482, 9578, 9592, 9596, 9626, 9718, 9736, 9772,
				9813, 9847, 9962, 9975, 10038, 10044, 10093, 10104, 10120,
				10158, 10213, 10292, 10618, 10636, 10757, 10783, 10815, 10839,
				10873, 10956, 11142, 11179, 11335, 11476, 11517, 11549, 11555,
				11613, 11650, 11692, 11734, 11785, 11789, 11844, 11874, 11931,
				12009, 12009, 12031, 12044, 12198, 12198, 12252, 12313, 12434,
				12472, 12514, 12568, 12570, 12582, 12628, 12661, 12675, 12705,
				12763, 12766, 12783, 12786, 12836, 12913, 12953, 12979, 13022,
				13100, 13100, 13131, 13180, 13202, 13264, 13279, 13323, 13449,
				13461, 13560, 13616, 13684, 13700, 13747, 13753, 13757, 13759,
				13853, 13887, 13909, 13931, 14103, 14119, 14146, 14254, 14332,
				14413, 14461, 14507, 14550, 14577, 14696, 14696, 14862, 14915,
				14938, 15238, 15294, 15386, 15407, 15518, 15526, 15531, 15540,
				15559, 15676, 15858, 16094, 16137, 16169, 16196, 16240, 16326,
				16506, 16512, 16513, 16552, 16641, 16648, 16653, 16703, 16707,
				16762, 16823, 16888, 17012, 17015, 17114, 17207, 17209, 17219,
				17227, 17239, 17257, 17350, 17461, 17632, 17689, 17706, 17780,
				17838, 17908, 17939, 17962, 17963, 17983, 18373, 18516, 18531,
				18610, 18613, 18797, 18832, 18852, 18897, 18961, 19001, 19029,
				19098, 19131, 19239, 19526, 19575, 19598, 19602, 19682, 19717,
				19764, 19942, 19969, 19975, 20003, 20004, 20004, 20008, 20057,
				20060, 20102, 20113, 20141, 20182, 20211, 20255, 20283, 20359,
				20461, 20514, 20518, 20657, 20673, 20742, 20796, 20833, 20865,
				20891, 20898, 20949, 21008, 21039, 21104, 21313, 21345, 21387,
				21462, 21471, 21564, 21765, 21766, 21812, 21835, 21860, 21885,
				21903, 21906, 21916, 22003, 22025, 22149, 22178, 22201, 22378,
				22380, 22384, 22388, 22424, 22577, 22599, 22630, 22635, 22639,
				22685, 22721, 22748, 22787, 22847, 22854, 22910, 22958, 23005,
				23227, 23250, 23315, 23317, 23326, 23437, 23454, 23671, 23674,
				23810, 23851, 23912, 23949, 24006, 24089, 24107, 24210, 24253,
				24319, 24364, 24411, 24457, 24462, 24561, 24665, 24699, 24766,
				24881, 24894, 24998, 25015, 25059, 25189, 25200, 25225, 25283,
				25342, 25420, 25506, 25735, 25768, 25814, 25858, 26057, 26082,
				26100, 26123, 26126, 26337, 26415, 26478, 26500, 26634, 26693,
				26776, 26784, 26836, 26880, 26939, 26987, 27243, 27605, 27638,
				27655, 27690, 27709, 27776, 27863, 28043, 28137, 28196, 28233,
				28288, 28307, 28314, 28367, 28367, 28413, 28450, 28463, 28522,
				28602, 28652, 28656, 28693, 28723, 28736, 28858, 28916, 28982,
				29095, 29153, 29298, 29345, 29351, 29434, 29526, 29532, 29674,
				29689, 29841, 29882, 29933, 29933, 29973, 29973, 30100, 30103,
				30153, 30170, 30256, 30381, 30395, 30440, 30495, 30561, 30614,
				30660, 30661, 30663, 30681, 30766, 30860, 30875, 30986, 31024,
				31104, 31108, 31179, 31186, 31224, 31250, 31310, 31386, 31566,
				31602, 31660, 31701, 31712, 31721, 31762, 31807, 31842, 31931,
				31966, 31991, 32002, 32160, 32175, 32194, 32282, 32386, 32478,
				32502, 32516 };
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(16609.0);
	}

	@Test
	public void testFindMinIndex30() {
		int[] A = { 59, 66, 67, 81, 83, 92, 129, 304, 422, 439, 448, 454, 469,
				510, 535, 564, 568, 570, 673, 678, 714, 715, 731, 741, 843,
				948, 1012, 1012, 1018, 1094, 1097, 1103, 1116, 1117, 1127,
				1130, 1145, 1254, 1276, 1330, 1339, 1348, 1354, 1356, 1379,
				1389, 1407, 1420, 1435, 1436, 1439, 1449, 1457, 1467, 1479,
				1492, 1587, 1620, 1634, 1670, 1727, 1754, 1798, 1838, 1948,
				1977, 2129, 2138, 2201, 2211, 2223, 2270, 2286, 2323, 2327,
				2328, 2375, 2391, 2424, 2426, 2468, 2497, 2567, 2598, 2675,
				2738, 2791, 2797, 2841, 2892, 2902, 2906, 2925, 2973, 2995,
				3026, 3072, 3081, 3095, 3126, 3139, 3146, 3146, 3183, 3255,
				3284, 3325, 3374, 3426, 3429, 3493, 3506, 3570, 3584, 3599,
				3615, 3626, 3647, 3740, 3747, 3843, 3874, 3896, 3928, 3950,
				4058, 4068, 4087, 4131, 4138, 4138, 4148, 4160, 4168, 4216,
				4224, 4225, 4239, 4308, 4337, 4383, 4419, 4484, 4490, 4559,
				4594, 4647, 4652, 4706, 4769, 4833, 4901, 4962, 4993, 5005,
				5024, 5057, 5068, 5080, 5115, 5201, 5212, 5232, 5358, 5418,
				5429, 5443, 5473, 5515, 5546, 5588, 5618, 5664, 5665, 5684,
				5706, 5728, 5732, 5762, 5788, 5801, 5898, 5985, 6010, 6019,
				6075, 6107, 6116, 6130, 6198, 6236, 6244, 6247, 6267, 6306,
				6328, 6366, 6431, 6448, 6461, 6578, 6585, 6587, 6646, 6648,
				6764, 6820, 6834, 6892, 6901, 7070, 7085, 7089, 7182, 7209,
				7216, 7315, 7332, 7348, 7416, 7540, 7559, 7564, 7573, 7624,
				7672, 7676, 7683, 7731, 7763, 7808, 7908, 7912, 7918, 8008,
				8012, 8045, 8047, 8073, 8123, 8150, 8159, 8175, 8193, 8297,
				8326, 8333, 8386, 8416, 8417, 8444, 8453, 8455, 8468, 8523,
				8539, 8643, 8666, 8691, 8697, 8736, 8758, 8796, 8798, 8815,
				8819, 8826, 8838, 8874, 8932, 8945, 8951, 8958, 9040, 9059,
				9068, 9084, 9107, 9163, 9228, 9256, 9286, 9294, 9359, 9378,
				9418, 9474, 9539, 9545, 9576, 9604, 9758, 9782, 9796, 9825,
				9967, 9999, 10054, 10086, 10198, 10235, 10363, 10366, 10432,
				10455, 10475, 10482, 10499, 10595, 10628, 10663, 10673, 10704,
				10730, 10739, 10747, 10763, 10847, 10897, 10925, 11029, 11063,
				11067, 11073, 11102, 11109, 11164, 11205, 11225, 11233, 11243,
				11266, 11288, 11338, 11339, 11480, 11484, 11533, 11611, 11746,
				11764, 11833, 11940, 12027, 12050, 12119, 12175, 12189, 12206,
				12217, 12240, 12295, 12299, 12340, 12343, 12371, 12372, 12437,
				12453, 12470, 12613, 12645, 12667, 12721, 12746, 12838, 12846,
				12851, 13149, 13150, 13230, 13235, 13248, 13304, 13349, 13369,
				13409, 13420, 13473, 13496, 13535, 13543, 13635, 13676, 13729,
				13748, 13776, 13821, 13855, 13926, 13980, 13989, 14012, 14088,
				14102, 14137, 14146, 14163, 14257, 14259, 14323, 14367, 14391,
				14404, 14436, 14454, 14465, 14468, 14604, 14620, 14642, 14672,
				14745, 14795, 14867, 15006, 15036, 15091, 15159, 15272, 15277,
				15309, 15370, 15517, 15543, 15565, 15573, 15653, 15669, 15693,
				15700, 15738, 15745, 15859, 15880, 15918, 15991, 16006, 16012,
				16070, 16076, 16124, 16130, 16187, 16214, 16219, 16254, 16389,
				16415, 16420, 16471, 16473, 16477, 16525, 16543, 16557, 16570,
				16594, 16598, 16645, 16704, 16752, 16773, 16786, 16797, 16827,
				16904, 16935, 17016, 17085, 17140, 17151, 17160, 17185, 17202,
				17266, 17307, 17348, 17379, 17383, 17417, 17428, 17439, 17452,
				17479, 17494, 17568, 17619, 17689, 17705, 17744, 17814, 17840,
				17876, 17939, 18007, 18008, 18071, 18122, 18147, 18161, 18181,
				18223, 18260, 18299, 18355, 18411, 18496, 18513, 18523, 18529,
				18538, 18604, 18636, 18653, 18685, 18736, 18761, 18770, 18815,
				18844, 18868, 18903, 18977, 19034, 19047, 19150, 19204, 19210,
				19237, 19282, 19289, 19310, 19388, 19419, 19431, 19441, 19524,
				19557, 19607, 19675, 19713, 19732, 19918, 19945, 20008, 20021,
				20032, 20034, 20113, 20175, 20197, 20219, 20263, 20447, 20456,
				20495, 20525, 20540, 20584, 20654, 20667, 20673, 20685, 20689,
				20766, 20816, 21038, 21078, 21111, 21133, 21192, 21234, 21311,
				21335, 21362, 21374, 21392, 21408, 21492, 21496, 21618, 21674,
				21735, 21749, 22053, 22068, 22200, 22208, 22227, 22232, 22245,
				22311, 22316, 22335, 22434, 22436, 22437, 22451, 22472, 22500,
				22536, 22549, 22582, 22647, 22681, 22871, 22882, 22885, 22926,
				23070, 23079, 23122, 23122, 23157, 23238, 23278, 23360, 23471,
				23482, 23487, 23490, 23497, 23546, 23605, 23655, 23718, 23750,
				23844, 23852, 23906, 23961, 24021, 24027, 24062, 24074, 24133,
				24141, 24173, 24177, 24194, 24226, 24264, 24332, 24421, 24443,
				24472, 24603, 24603, 24606, 24682, 24768, 24779, 24785, 24978,
				24983, 25015, 25037, 25038, 25058, 25107, 25108, 25117, 25141,
				25179, 25234, 25333, 25339, 25340, 25372, 25456, 25478, 25485,
				25521, 25528, 25528, 25549, 25561, 25588, 25767, 25816, 25840,
				26073, 26209, 26313, 26393, 26420, 26471, 26496, 26498, 26513,
				26540, 26562, 26568, 26651, 26670, 26688, 26711, 26736, 26736,
				26752, 26763, 26801, 26814, 26822, 26832, 26837, 26843, 26846,
				26877, 26886, 26917, 26945, 26956, 27016, 27029, 27083, 27123,
				27137, 27165, 27195, 27196, 27238, 27399, 27445, 27458, 27470,
				27568, 27570, 27585, 27591, 27726, 27755, 27759, 27901, 27904,
				27937, 28002, 28049, 28127, 28132, 28132, 28140, 28203, 28208,
				28234, 28306, 28332, 28345, 28351, 28366, 28411, 28454, 28535,
				28537, 28550, 28604, 28638, 28640, 28756, 28761, 28768, 28909,
				28921, 28982, 29036, 29121, 29174, 29188, 29196, 29197, 29225,
				29267, 29301, 29321, 29343, 29370, 29431, 29447, 29477, 29534,
				29615, 29669, 29683, 29700, 29710, 29741, 29747, 29804, 29823,
				29828, 29869, 29896, 29981, 30079, 30228, 30269, 30311, 30345,
				30456, 30492, 30536, 30596, 30650, 30668, 30725, 30767, 30795,
				30862, 30923, 30953, 30967, 30980, 31009, 31085, 31098, 31148,
				31161, 31200, 31216, 31252, 31256, 31390, 31401, 31419, 31419,
				31519, 31539, 31562, 31677, 31750, 31843, 31852, 31886, 31904,
				31910, 31931, 31943, 31947, 31979, 32048, 32060, 32067, 32168,
				32248, 32272, 32298, 32334, 32364, 32406, 32416, 32474, 32478,
				32536, 32543, 32553, 32585, 32604, 32645, 32698, 32712, 32724 };
		int[] B = { 8, 230, 299, 300, 304, 322, 401, 534, 560, 573, 612, 613,
				768, 803, 839, 1101, 1149, 1246, 1249, 1421, 1427, 1531, 1560,
				1572, 1584, 1735, 1790, 1823, 1845, 1857, 1911, 2001, 2091,
				2160, 2244, 2251, 2296, 2307, 2333, 2359, 2439, 2447, 2500,
				2580, 2645, 2676, 2729, 2804, 2808, 2821, 2869, 2989, 3128,
				3166, 3263, 3336, 3378, 3473, 3605, 3607, 3765, 3806, 3874,
				3932, 4024, 4025, 4151, 4164, 4165, 4276, 4365, 4608, 4633,
				4890, 5000, 5087, 5169, 5169, 5202, 5219, 5423, 5434, 5467,
				5585, 5621, 5763, 5837, 5956, 6158, 6203, 6249, 6272, 6593,
				6603, 6625, 6653, 6705, 6707, 6712, 6801, 6875, 6890, 6998,
				7021, 7082, 7125, 7125, 7200, 7273, 7321, 7540, 7549, 7838,
				8076, 8123, 8141, 8219, 8343, 8433, 8568, 8603, 8653, 8665,
				8797, 9085, 9216, 9303, 9344, 9349, 9399, 9445, 9664, 9851,
				9861, 10131, 10172, 10255, 10584, 10669, 10860, 10861, 11111,
				11116, 11186, 11198, 11396, 11442, 11495, 11612, 11615, 11634,
				11665, 11667, 11755, 12037, 12124, 12243, 12337, 12339, 12400,
				12402, 12473, 12479, 12684, 12708, 12886, 12893, 12911, 12966,
				13023, 13150, 13239, 13466, 13628, 13672, 13748, 13879, 13887,
				13908, 13981, 14056, 14415, 14437, 14468, 14504, 14579, 14630,
				14680, 14815, 14873, 14944, 15216, 15327, 15347, 15594, 15747,
				15748, 16116, 16129, 16135, 16214, 16268, 16301, 16326, 16393,
				16534, 16564, 16575, 16612, 16705, 16809, 16832, 16911, 16944,
				17182, 17311, 17338, 17390, 17544, 17640, 17642, 17662, 17679,
				17681, 17796, 17918, 18079, 18149, 18168, 18184, 18186, 18266,
				18397, 18426, 18611, 18634, 18715, 18863, 18969, 19117, 19299,
				19391, 19401, 19455, 19530, 19544, 19558, 19578, 19612, 19770,
				19794, 19820, 19878, 19935, 20054, 20148, 20233, 20235, 20250,
				20295, 20522, 21043, 21073, 21109, 21254, 21293, 21341, 21436,
				21519, 21530, 21687, 21702, 21803, 21922, 21950, 21965, 22007,
				22174, 22214, 22318, 22321, 22336, 22409, 22455, 22518, 22528,
				22603, 22875, 22884, 22915, 22982, 23132, 23188, 23212, 23237,
				23271, 23365, 23372, 23441, 23470, 23499, 23525, 23561, 23648,
				24040, 24184, 24264, 24284, 24333, 24390, 24457, 24530, 24575,
				24679, 24796, 24874, 25092, 25097, 25196, 25498, 25529, 25587,
				25738, 25828, 25889, 25987, 26011, 26063, 26064, 26163, 26176,
				26248, 26463, 26699, 26757, 26768, 26772, 26953, 27086, 27193,
				27642, 27690, 27695, 27735, 27739, 27801, 27806, 27892, 27897,
				27925, 27927, 28093, 28152, 28153, 28191, 28252, 28352, 28391,
				28537, 28651, 28759, 28780, 28851, 28916, 29062, 29071, 29136,
				29346, 29478, 29478, 29621, 29648, 29732, 29734, 29757, 29915,
				29937, 30042, 30056, 30090, 30119, 30151, 30308, 30320, 30325,
				30545, 30599, 30669, 30698, 30701, 30798, 30812, 30822, 30895,
				31060, 31103, 31278, 31488, 31645, 31685, 31878, 31892, 32115,
				32142, 32169, 32310, 32317, 32423, 32426, 32546, 32621, 32650,
				32729, 32743 };
		ASSERT.that(sut.findMedianSortedArrays(A, B)).is(16096.0);
	}

	@Test
	public void testKthSelection2() {
		int[] A = { 1, 2, 3 };
		int[] B = { 1, 2, 3 };
		int[] C = { 1, 1, 2, 2, 3, 3 };
		for (int i = 0; i < C.length; i++) {
			ASSERT.that(sut.kthSelection(A, B, i + 1)).is(C[i]);
		}
	}

	@Test
	public void testKthSelection1() {
		int[] A = { 76, 89, 104, 287, 566, 596, 660 };
		int[] B = { 122, 255, 318, 346, 361 };
		int[] C = { 76, 89, 104, 122, 255, 287, 318, 346, 361, 566, 596, 660 };
		for (int i = 0; i < C.length; i++) {
			ASSERT.that(sut.kthSelection(A, B, i + 1)).is(C[i]);
		}
	}

}
